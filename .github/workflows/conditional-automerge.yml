name: Conditional automerge (rate-limit-friendly)

on:
  pull_request_target:
    types: [labeled]
  schedule:
    # Low-traffic UTC window for critical merges to main
    - cron: '0 1-4 * * *'

permissions:
  contents: write
  pull-requests: write

jobs:
  conditional-automerge:
    runs-on: ubuntu-latest
    if: >-
      ${{ github.event_name == 'schedule' ||
          (github.event_name == 'pull_request_target' && contains(github.event.pull_request.labels.*.name, 'automerge')) }}
    steps:
      - name: Decide and merge (GitHub Script)
        uses: actions/github-script@v7
        with:
          script: |
            const windowHours = new Set([1,2,3,4]); // UTC hours allowed for main

            async function tryMerge(pr) {
              // Only attempt merge if PR is mergeable and branch protections satisfied
              const prRef = { owner: context.repo.owner, repo: context.repo.repo, pull_number: pr.number };
              // Refresh PR to get latest mergeable state
              const fresh = (await github.rest.pulls.get(prRef)).data;

              // Skip drafts
              if (fresh.draft) return { skipped: true, reason: 'draft' };

              // Check required approvals / checks via state flags
              if (fresh.mergeable_state && ['blocked', 'dirty'].includes(fresh.mergeable_state)) {
                return { skipped: true, reason: `mergeable_state=${fresh.mergeable_state}` };
              }

              try {
                await github.rest.pulls.merge({ ...prRef, merge_method: 'squash' });
                return { merged: true };
              } catch (err) {
                return { merged: false, error: err.message || String(err) };
              }
            }

            const now = new Date();
            const hourUTC = now.getUTCHours();

            const baseIsMain = (base) => base === 'main' || base === 'refs/heads/main';

            async function processOne(pr) {
              const isCritical = baseIsMain(pr.base.ref);
              const hasLabel = (pr.labels || []).some(l => l.name === 'automerge');
              if (!hasLabel) return;
              if (isCritical && !windowHours.has(hourUTC)) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner, repo: context.repo.repo, issue_number: pr.number,
                  body: `⏳ Automerge for **main** is deferred to the low-traffic UTC window (01:00–04:59). Current UTC hour: ${hourUTC}.`
                });
                return;
              }

              const result = await tryMerge(pr);
              if (result?.merged) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner, repo: context.repo.repo, issue_number: pr.number,
                  body: '✅ PR merged via rate-limit-friendly workflow.'
                });
              } else if (result?.skipped) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner, repo: context.repo.repo, issue_number: pr.number,
                  body: `⚠️ Automerge skipped (reason: ${result.reason}).`
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner, repo: context.repo.repo, issue_number: pr.number,
                  body: `❌ Automerge attempt failed: ${result?.error || 'unknown error'}`
                });
              }
            }

            if (context.eventName === 'pull_request_target') {
              const pr = context.payload.pull_request;
              await processOne(pr);
            } else {
              // Scheduled run: scan open PRs with the automerge label
              const prs = await github.paginate(github.rest.pulls.list, {
                owner: context.repo.owner, repo: context.repo.repo, state: 'open'
              });
              for (const pr of prs) {
                const hasLabel = (pr.labels || []).some(l => l.name === 'automerge');
                if (hasLabel) {
                  await processOne(pr);
                }
              }
            }
